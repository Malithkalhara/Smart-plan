[{"/home/malith/Malith/projects/smart-plan/src/reportWebVitals.js":"1","/home/malith/Malith/projects/smart-plan/src/App.js":"2","/home/malith/Malith/projects/smart-plan/src/components/home.jsx":"3","/home/malith/Malith/projects/smart-plan/src/index.js":"4","/home/malith/Malith/projects/smart-plan/src/components/map.jsx":"5","/home/malith/Malith/projects/smart-plan/src/components/maker.jsx":"6","/home/malith/Malith/projects/smart-plan/src/components/form.jsx":"7"},{"size":362,"mtime":1606290480091,"results":"8","hashOfConfig":"9"},{"size":165,"mtime":1606312155176,"results":"10","hashOfConfig":"9"},{"size":26998,"mtime":1607970755264,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1606290480091,"results":"12","hashOfConfig":"9"},{"size":2358,"mtime":1607847784235,"results":"13","hashOfConfig":"9"},{"size":317,"mtime":1606317544298,"results":"14","hashOfConfig":"9"},{"size":129,"mtime":1606317653189,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n9pp1i",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/malith/Malith/projects/smart-plan/src/reportWebVitals.js",[],"/home/malith/Malith/projects/smart-plan/src/App.js",[],"/home/malith/Malith/projects/smart-plan/src/components/home.jsx",["32","33","34","35"],"import React,{useCallback, useState} from 'react';\n\nimport axios from 'axios';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Marker } from '@react-google-maps/api';\nimport { Circle } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport { Polyline } from '@react-google-maps/api';\nimport { InfoBox } from '@react-google-maps/api';\nimport { useForm } from 'react-hook-form';\nimport { Document, Page, Text,Image, View, StyleSheet,PDFViewer } from '@react-pdf/renderer';\nimport {Table,TableHeader,TableCell,TableBody,DataTableCell} from '@david.kucsai/react-pdf-table'\n\nimport Map from './map'\nimport Land from './images/land.png'\nimport code from './images/qrcode.jpg'\n\n\nvar rad = function(x) {\n  return x * Math.PI / 180;\n};\n\nvar getDistance = function(p1, p2) {\n  var R = 6378137; // Earthâ€™s mean radius in meter\n  var dLat = rad(p2.lat - p1.lat);\n  var dLong = rad(p2.lng - p1.lng);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(rad(p1.lat)) * Math.cos(rad(p2.lat)) *\n    Math.sin(dLong / 2) * Math.sin(dLong / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = (R * c)/1000;\n  return d.toFixed(1); // returns the distance in killometer\n};\n\nconst Home = () => {\n\tconst [latitude,setLatitude]=useState();\n  const [longitude,setLongitude]=useState();\n  const [latt,setLat]=useState(7.488862);//7.488862\n  const [lngg,setLng]=useState(80.353441);//80.353441\n  const [features, setFeatures] = useState({\n    school: [],\n    hospital: [],\n    bank: [],\n    police:[],\n    supermarket:[]\n  });\n  const [open, setOpen] = useState(false);\n  const [openPdf, setOpenPdf] = useState(false);\n  const [data, setData] = useState();\n  const { register ,getValues} = useForm({\n    mode: 'onBlur',\n  });\n  const [facilities, setFacilities] = useState([]);\n  const [school, setSchool] = useState(0);\n  const [hospital, setHospital] = useState(0);\n  const [bank, setBank] = useState(0);\n  const [police, setPolice] = useState(0);\n  const [supermarket, setSupermarket] = useState(0);\n  const [finalValue, setFinalValue] = useState(0);\n  \n  const center = {\n    lat: parseFloat(latt),\n    lng: parseFloat(lngg)\n  };\n\n  const handleLatitude = (data) => {\n    setLatitude(data);\n  }\n\n  const handleLongitude = (data) => {\n    setLongitude(data);\n  }\n\n  const handleClick = () => {\n    setLat(latitude);\n    setLng(longitude);\n  }\n\n  const handleCheckbox = async (data,type) => {\n\n    if(data){\n      if(data){\n        const result = await axios.get(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude},${longitude}&radius=1500&type=${type}&key=AIzaSyAcOnvMwmTrA9bFr7MiMwu9Now2tRUre9U`)\n\n        switch (type) {\n          case 'school':\n            setFeatures({...features,'school':result.data.results.slice(0,4)})\n            break;\n          case 'hospital':\n            setFeatures({...features,'hospital':result.data.results.slice(0,4)})\n            break;\n          case 'bank':\n            setFeatures({...features,'bank':result.data.results.slice(0,4)})\n            break;\n          case 'police':\n            setFeatures({...features,'police':result.data.results.slice(0,4)})\n            break;\n          case 'supermarket':\n            setFeatures({...features,'supermarket':result.data.results.slice(0,4)})\n            break;\n          default:\n            break;\n        }\n      }\n    }else{\n      switch (type) {\n        case 'school':\n          setFeatures({...features,'school':[]})\n          break;\n        case 'hospital':\n          setFeatures({...features,'hospital':[]})\n          break;\n        case 'bank':\n          setFeatures({...features,'bank':[]})\n          break;\n        case 'police':\n          setFeatures({...features,'police':[]})\n          break;\n        case 'supermarket':\n          setFeatures({...features,'supermarket':[]})\n          break;\n        default:\n          break;\n      }\n    }\n\n\n  }\n\n  const handleFacilities = (checked,facility) =>{\n    if(checked){\n      console.log(facility);\n      switch (facility) {\n        case 'electricity':\n          setFacilities([...facilities,'electricity'])\n          break;\n        case 'communication_networks':\n          setFacilities([...facilities,'communication_networks'])\n          break;\n        case 'trasportation_facilities':\n          setFacilities([...facilities,'trasportation_facilities'])\n          break;\n        case 'sewage':\n          setFacilities([...facilities,'sewage'])\n          break;\n        case 'water':\n          setFacilities([...facilities,'water'])\n          break;\n        default:\n          break;\n      }\n    }\n    \n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  const handleOpenPdf = () => {\n    setOpenPdf(true);\n    calValue();\n  };\n\n  const handleClosePdf = (value) => {\n    setOpenPdf(false);\n  };\n\n  const handleGenerate = (value) => {\n    console.log(school,hospital,bank,police,supermarket);\n    const values = getValues();\n    setData(values);\n    console.log(values);\n    handleOpenPdf();\n  };\n\n  const columns = [\n    { field: 'id', headerName: 'ID', width: 70 },\n    { field: 'firstName', headerName: 'First name', width: 130 },\n    { field: 'lastName', headerName: 'Last name', width: 130 },\n    {\n      field: 'age',\n      headerName: 'Age',\n      type: 'number',\n      width: 90,\n    },\n    {\n      field: 'fullName',\n      headerName: 'Full name',\n      description: 'This column has a value getter and is not sortable.',\n      sortable: false,\n      width: 160,\n      valueGetter: (params) =>\n        `${params.getValue('firstName') || ''} ${params.getValue('lastName') || ''}`,\n    },\n  ];\n\n\n  const styles = StyleSheet.create({\n    page: { width:'1000px',height:'1000px' },\n    heading: { backgroundColor:'black',color: 'white', textAlign: 'center',fontWeight:'bold',padding:20,marginBottom:10},\n    text:{fontWeight:'bold'},\n    section: { borderStyle:'solid',borderWidth:3,borderColor:'black' ,textAlign: 'left',fontSize:14,padding:10,fontWeight:'bold',width:170,marginLeft:10},\n    test:{borderStyle:'solid',borderWidth:3,borderColor:'black'},\n    table:{margin:10},\n    image: {\n      width: '30%',\n      padding: 10,\n      textAlign:'right'\n      //backgroundColor: 'grey',\n    },\n    font:{fontSize:14,paddingLeft:10,paddingBottom:10,paddingTop:10},\n    font1:{fontSize:14,paddingLeft:10,paddingBottom:10},\n    font2:{fontSize:14,paddingLeft:80}\n  });\n\n  const caldistanceBased=(distance)=>{\n\n    if(0<distance && distance<1){\n      return 20;\n    }else if(1<distance && distance<2){\n      return 15;\n    }else if(2<distance && distance<3){\n      return 10;\n    }else if(3<distance && distance<4){\n      return 5;\n    }else{\n      return 0;\n    }\n  }\n\n  const getWeightValue=(value)=>{\n\n    if(80<value && value<100){\n      return 0.5;\n    }else if(60<value && value<80){\n      return 0.4;\n    }else if(40<value && value<60){\n      return 0.3;\n    }else if(20<value && value<40){\n      return 0.2;\n    }else{\n      return 0.1;\n    }\n  }\n\n  const calValue = (distance) =>{\n    const facValue=facilities.length*20\n\n    const distancePercent=caldistanceBased(school)+caldistanceBased(hospital)+caldistanceBased(bank)+caldistanceBased(police)+caldistanceBased(supermarket)\n    const averageValue=(facValue+distancePercent)/2\n    const weight=getWeightValue(averageValue);\n    const approximateValue=Number(getValues('value'))\n  \n    const finalResult=approximateValue+(approximateValue*weight)\n    setFinalValue(finalResult)\n  }\n   \n  const testMarker = (feature,type,index)=>{\n    const path=[feature.geometry.location,center]\n    const value=getDistance(feature.geometry.location,center);\n\n    if(index===0){\n      switch (type) {\n        case 'school':\n          setSchool(value)\n          break;\n        case 'hospital':\n          setHospital(value)\n          break;\n        case 'bank':\n          setBank(value)\n          break;\n        case 'police':\n          setPolice(value)\n          break;\n        case 'supermarket':\n          setSupermarket(value)\n          break;\n        default:\n          break;\n      }\n    }\n    const options = {\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FFFFFF',\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: 1000,\n      zIndex: 1\n    }\n\n      return (\n        <div>\n          <Marker position={feature.geometry.location}/>\n          <InfoWindow\n            position={feature.geometry.location}\n          >\n            <div >\n              <h3>{feature.name}</h3>\n              <h4>{value}KM</h4>\n            </div>\n          </InfoWindow>\n          <Polyline\n            path={path}\n            options={options}\n          />\n          \n        </div>\n        \n      )\n  }\n\n\n  return (\n\t\t<Grid container>\n      <Grid item container >\n      \n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" >\n            BOOMI Value\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    \n      </Grid>\n      <Grid item>\n      <Typography variant=\"subtitle1\" gutterBottom style={{padding:\"50px 100px 5px 100px\"}}>\n        Enter Cordinates (WGX) :\n      </Typography>\n      </Grid>\n      <Grid item container style={{padding:\"0px 100px 0px 100px\"}} spacing={5}>\n            <Grid item>\n              <TextField onChange={(e)=>{handleLatitude(e.target.value);}} label=\"Latitude\" variant=\"outlined\" size=\"small\" />\n            </Grid>\n            <Grid item>\n              <TextField onChange={(e)=>{handleLongitude(e.target.value);}} label=\"Longitude\" variant=\"outlined\" size=\"small\" />\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\" onClick={handleClick} color=\"primary\">\n                Submit\n              </Button>\n            </Grid>\n            <Grid item style={{paddingLeft:'400px'}}>\n              <Button variant=\"contained\" color=\"secondary\" style={{height:'60px',}} onClick={handleClickOpen}>\n                Generate report\n              </Button>\n              \n            </Grid>\n            \n      </Grid>\n      <Typography variant=\"subtitle1\" gutterBottom style={{padding:\"0px 100px 0px 100px\"}}>\n        Select Features :\n      </Typography>\n      <Grid item container style={{padding:\"0px 100px 50px 100px\"}} spacing={5}>\n        <Grid item>\n          <FormControlLabel\n          control={\n            <Checkbox\n              // checked={state.checkedB}\n              onChange={(e)=>{handleCheckbox(e.target.checked,'school')}}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Schools\"\n          />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n          control={\n            <Checkbox\n              // checked={state.checkedB}\n              onChange={(e)=>{handleCheckbox(e.target.checked,'hospital')}}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Hospitals\"\n          />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n          control={\n            <Checkbox\n              // checked={state.checkedB}\n              onChange={(e)=>{handleCheckbox(e.target.checked,'bank')}}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Banks\"\n          />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n          control={\n            <Checkbox\n              // checked={state.checkedB}\n              onChange={(e)=>{handleCheckbox(e.target.checked,'police')}}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Police stations\"\n          />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n          control={\n            <Checkbox\n              // checked={state.checkedB}\n              onChange={(e)=>{handleCheckbox(e.target.checked,'supermarket')}}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Super markets\"\n          />\n        </Grid>\n\n        </Grid>\n      <div style={{padding:\"0px 100px\"}}>\n        <Map center={center} features={features} facilities={facilities} testMarker={testMarker}/>\n      </div>\n      <Dialog\n        maxWidth='md'\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Basic Information</DialogTitle>\n        <DialogContent dividers>\n          <DialogContentText id=\"alert-dialog-description\">\n           <Grid container >\n              <Grid item style={{flex:1}} container spacing={3}>\n                <Grid item  style={{flex:1}}>\n                  <p style={{color:'black'}}>Village</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"village\"\n                      placeholder=\"Village\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>GND</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"gnd\"\n                      placeholder=\"GND\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container spacing={3}>\n                <Grid item style={{flex:1}} >\n                <p style={{color:'black'}}>DSD</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"dsd\"\n                      placeholder=\"DSD\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}> District</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"district\"\n                      placeholder=\"District\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container spacing={3}>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Province</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"province\"\n                      placeholder=\"Province\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Parcel ID</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"id\"\n                      placeholder=\"Parcel ID\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container spacing={3}>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Lot No</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"lot\"\n                      placeholder=\"Lot No\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Extent</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"extent\"\n                      placeholder=\"Extent\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container spacing={3}>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Name of the land</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"name\"\n                      placeholder=\"Name of the land\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Land use</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"land\"\n                      placeholder=\"Land use\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container spacing={3}>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Claimant</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"claimant\"\n                      placeholder=\"Claimant\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Area (Acres/Roots/Perches)</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"area\"\n                      placeholder=\"Area\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container spacing={3}>\n                <Grid item style={{flex:1}}>\n                <p style={{color:'black'}}>Approximated Value</p>\n                  <FormControl fullWidth>\n                    <TextField\n                      inputRef={register}\n                      name=\"value\"\n                      placeholder=\"Approximated Value (Rs)\"\n                      variant=\"outlined\"\n                      size='small'\n                    />\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid item container>\n              <Grid item container>\n              <p style={{color:'black'}}>Facilities</p>\n              </Grid>\n                <Grid item style={{flex:1}}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        // checked={state.checkedB}\n                        onChange={(e)=>{handleFacilities(e.target.checked,'electricity')}}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Electricity\"\n                  />\n                </Grid>\n                <Grid item style={{flex:1}}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        // checked={state.checkedB}\n                        onChange={(e)=>{handleFacilities(e.target.checked,'communication_networks')}}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Communication networks\"\n                  />\n                </Grid>\n                <Grid item style={{flex:1}}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        // checked={state.checkedB}\n                        onChange={(e)=>{handleFacilities(e.target.checked,'trasportation_facilities')}}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Trasportation facilities\"\n                  />\n                </Grid>\n                <Grid item style={{flex:1}}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        // checked={state.checkedB}\n                        onChange={(e)=>{handleFacilities(e.target.checked,'sewage')}}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Sewage\"\n                  />\n                </Grid>\n                <Grid item style={{flex:1}}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        // checked={state.checkedB}\n                        onChange={(e)=>{handleFacilities(e.target.checked,'water')}}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Water\"\n                  />\n                </Grid>\n              </Grid>\n           </Grid>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            cancel\n          </Button>\n          <Button onClick={handleGenerate} color=\"primary\" autoFocus>\n            Generate\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n{data ?      <Dialog\n      fullScreen\n        open={openPdf}\n        onClose={handleClosePdf}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <PDFViewer height='950px'>\n          <Document>\n            <Page size=\"A4\" style={styles.page}>\n              <View style={styles.heading}>\n                <Text style={styles.text}>Final Report</Text>\n              </View>\n              <View style={styles.section}>\n                  <Text>Latitude : {latitude}</Text>\n                  <Text>Longitude: {longitude}</Text>\n              </View>\n              <Image\n                style={styles.image}\n                src={Land}\n              />\n              <View style={styles.table}>\n              <Table\n                    data={[\n                        {firstName: \"Village\", lastName: `${data.village}`},\n                        {firstName: \"GND\", lastName: `${data.gnd}`},\n                        {firstName: \"DSD\", lastName: `${data.dsd}`},\n                        {firstName: \"District\", lastName: `${data.district}`},\n                        {firstName: \"Province\", lastName: `${data.province}`},\n                        {firstName: \"Parcel ID\", lastName: `${data.id}`},\n                        {firstName: \"Lot No\", lastName: `${data.lot}`},\n                        {firstName: \"Extent\", lastName: `${data.extent}`},\n                        {firstName: \"Name of the land\", lastName: `${data.name}`},\n                        {firstName: \"Land use\", lastName: `${data.land}`},\n                        {firstName: \"Claimant\", lastName: `${data.claimant}`},\n                        {firstName: \"Area\", lastName: `${data.area}`},\n                        {firstName: \"Approximated Value (Rs)\", lastName: `${data.value}`}\n                    ]}\n                >\n                    <TableHeader textAlign={\"center\"}>\n                        <TableCell weighting={0.8}>\n                            Name\n                        </TableCell>\n                        <TableCell weighting={0.8}>\n                            Value\n                        </TableCell>\n                    </TableHeader>\n                    <TableBody textAlign={\"center\"}>\n                        <DataTableCell getContent={(r) => r.firstName}/>\n                        <DataTableCell getContent={(r) => r.lastName}/>\n                    </TableBody>\n                </Table>\n                </View>\n                <View >\n                  <Text style={styles.font}>Infastructure :</Text>\n                  {facilities.map(facility=>{\n                    return <Text style={styles.font2}>{facility}</Text>\n                  })}\n                  \n                </View>\n                <View >\n                  <Text style={styles.font}>Proximity Operators :</Text>\n                  {school>0 ?  <Text style={styles.font2}>School - {school}KM</Text>:null}\n                  {hospital>0 ? <Text style={styles.font2}>Hospital - {hospital}KM</Text>:null}\n                  {bank>0 ? <Text style={styles.font2}>Bank - {bank}KM</Text>:null}\n                  {police>0 ? <Text style={styles.font2}>police - {police}KM</Text>:null}\n                  {supermarket>0 ? <Text style={styles.font2}>Supermarket - {supermarket}KM</Text>:null}\n                  \n                </View>\n                <View style={{ textAlign: 'center',paddingTop:10}}>\n                  <Text>Valuation Price Per Perch (Rs) </Text>\n                  <Text style={{fontSize:'16'}}>{finalValue}/=</Text>\n                </View>\n                <View >\n                  <Image\n                      style={{width:'10%',margin:'50 0 0 500'}}\n                      src={code}\n                    />\n                </View>\n            </Page>\n          </Document>\n        </PDFViewer>\n      </Dialog> : null}\n\n        \n\t\t</Grid>\n  );\n};\n\nexport default Home;\n","/home/malith/Malith/projects/smart-plan/src/index.js",[],"/home/malith/Malith/projects/smart-plan/src/components/map.jsx",["36","37","38","39","40","41","42","43","44","45"],"import React,{useState,useCallback} from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Marker } from '@react-google-maps/api';\nimport { Circle } from '@react-google-maps/api';\nimport { InfoWindow } from '@react-google-maps/api';\nimport { Polyline } from '@react-google-maps/api';\nimport { InfoBox } from '@react-google-maps/api';\nimport { DistanceMatrixService } from '@react-google-maps/api';\n\n\nconst Map = ({center,features,facilities,testMarker}) => {\n\n  const [distance, setDistance] = useState([]);\n  const [count, setCount] = useState('false')\n\n  const containerStyle = {\n    width: '1200px',\n    height: '650px'\n  };\n\n  // const center = {\n  //   lat: 7.488862,\n  //   lng: 80.353441\n  // };\n\n  const position = {\n    lat: 7.488862,\n    lng: 80.353441\n  };\n\n  const options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FFFFFF',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 1000,\n    zIndex: 1\n  }\n\n  const optionsTwo = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FFFFFF',\n    fillOpacity: 0.1,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 2000,\n    zIndex: 1\n  }\n\n  return (\n      <LoadScript\n      googleMapsApiKey=\"AIzaSyAcOnvMwmTrA9bFr7MiMwu9Now2tRUre9U\"\n    >\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={14}\n      >\n        <Marker position={center}/>\n        \n        {features.school.map((school,index)=>(\n          testMarker(school,'school',index)\n        ))}\n        {features.hospital.map((hospital,index)=>(\n          testMarker(hospital,'hospital',index)\n          \n        ))}\n        {features.bank.map((bank,index)=>(\n          testMarker(bank,'bank',index)\n        ))}\n        {features.police.map((police,index)=>(\n          testMarker(police,'police',index)\n        ))}\n        {features.supermarket.map((supermarket,index)=>(\n          testMarker(supermarket,'supermarket',index)\n        ))}\n        <Circle\n          options={options}\n          center={center}\n        />\n        <Circle\n          options={optionsTwo}\n          center={center}\n        />\n      </GoogleMap>\n    </LoadScript>\n  )\n}\n\nexport default Map;","/home/malith/Malith/projects/smart-plan/src/components/maker.jsx",[],"/home/malith/Malith/projects/smart-plan/src/components/form.jsx",[],{"ruleId":"46","severity":1,"message":"47","line":1,"column":15,"nodeType":"48","messageId":"49","endLine":1,"endColumn":26},{"ruleId":"46","severity":1,"message":"50","line":22,"column":10,"nodeType":"48","messageId":"49","endLine":22,"endColumn":16},{"ruleId":"46","severity":1,"message":"51","line":25,"column":10,"nodeType":"48","messageId":"49","endLine":25,"endColumn":17},{"ruleId":"46","severity":1,"message":"52","line":197,"column":9,"nodeType":"48","messageId":"49","endLine":197,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":1,"column":24,"nodeType":"48","messageId":"49","endLine":1,"endColumn":35},{"ruleId":"46","severity":1,"message":"53","line":5,"column":10,"nodeType":"48","messageId":"49","endLine":5,"endColumn":20},{"ruleId":"46","severity":1,"message":"54","line":6,"column":10,"nodeType":"48","messageId":"49","endLine":6,"endColumn":18},{"ruleId":"46","severity":1,"message":"51","line":7,"column":10,"nodeType":"48","messageId":"49","endLine":7,"endColumn":17},{"ruleId":"46","severity":1,"message":"55","line":8,"column":10,"nodeType":"48","messageId":"49","endLine":8,"endColumn":31},{"ruleId":"46","severity":1,"message":"56","line":13,"column":10,"nodeType":"48","messageId":"49","endLine":13,"endColumn":18},{"ruleId":"46","severity":1,"message":"57","line":13,"column":20,"nodeType":"48","messageId":"49","endLine":13,"endColumn":31},{"ruleId":"46","severity":1,"message":"58","line":14,"column":10,"nodeType":"48","messageId":"49","endLine":14,"endColumn":15},{"ruleId":"46","severity":1,"message":"59","line":14,"column":17,"nodeType":"48","messageId":"49","endLine":14,"endColumn":25},{"ruleId":"46","severity":1,"message":"60","line":26,"column":9,"nodeType":"48","messageId":"49","endLine":26,"endColumn":17},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'Circle' is defined but never used.","'InfoBox' is defined but never used.","'columns' is assigned a value but never used.","'InfoWindow' is defined but never used.","'Polyline' is defined but never used.","'DistanceMatrixService' is defined but never used.","'distance' is assigned a value but never used.","'setDistance' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","'position' is assigned a value but never used."]